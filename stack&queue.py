# -*- coding: utf-8 -*-
"""Stack&Queue.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tT0yUvHfNb-UUR_hv77M7FA0C-3aiHVi

ðŸŸ¦ STACKS IN PYTHON (LIFO)
"""

print("ðŸŸ¦ STACK (Last In First Out)")
# âœ… Creating an empty stack
stack = []

# âœ… Pushing elements
stack.append('A')
stack.append('B')
stack.append('C')

print("Current Stack:", stack)

# âœ… Popping the top element (removes last pushed)
top_element = stack.pop()
print("Popped Element:", top_element)
print("Stack after pop:", stack)

# âœ… Peeking at the top (without removing)
if stack:
    print("Top Element (peek):", stack[-1])
else:
    print("Stack is empty")

# âœ… Checking if stack is empty
if not stack:
    print("Stack is empty")
else:
    print("Stack is NOT empty")

"""ðŸŸ© QUEUES IN PYTHON (FIFO)

"""

# âœ… Importing deque from collections
from collections import deque

# âœ… Creating an empty queue
queue = deque()

# âœ… Enqueuing elements
queue.append('Task1')
queue.append('Task2')
queue.append('Task3')

print("Current Queue:", list(queue))

# âœ… Dequeuing the front element (removes first inserted)
front_task = queue.popleft()
print("Dequeued Element:", front_task)
print("Queue after dequeue:", list(queue))

# âœ… Peeking at the front (without removing)
if queue:
    print("Front Element (peek):", queue[0])
else:
    print("Queue is empty")

# âœ… Checking if queue is empty
if not queue:
    print("Queue is empty")
else:
    print("Queue is NOT empty")